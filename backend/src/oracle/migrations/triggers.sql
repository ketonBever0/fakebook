CREATE OR REPLACE TRIGGER post_content_check
BEFORE INSERT OR UPDATE ON POSTS
FOR EACH ROW
DECLARE
  expr_found BOOLEAN := FALSE;
  v_pattern VARCHAR2(200);
BEGIN
  FOR expr IN (SELECT PATTERN FROM FORBIDDEN_EXPRESSIONS)
  LOOP
    v_pattern := expr.PATTERN;
    IF REGEXP_LIKE(:NEW.TEXT, v_pattern, 'i') THEN
      expr_found := TRUE;
      EXIT;
    END IF;
  END LOOP;
  
  IF expr_found THEN
    RAISE_APPLICATION_ERROR(-20001, 'FORBIDDEN_EXPRESSION');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER user_fullname_check
BEFORE INSERT OR UPDATE OF FULLNAME ON USERS
FOR EACH ROW
DECLARE
  expr_found BOOLEAN := FALSE;
  v_pattern VARCHAR2(200);
BEGIN
  FOR expr IN (SELECT PATTERN FROM FORBIDDEN_EXPRESSIONS)
  LOOP
    v_pattern := expr.PATTERN;
    IF REGEXP_LIKE(:NEW.FULLNAME, v_pattern, 'i') THEN
      expr_found := TRUE;
      EXIT;
    END IF;
  END LOOP;
  
  IF expr_found THEN
    RAISE_APPLICATION_ERROR(-20001, 'FORBIDDEN_EXPRESSION');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER comment_content_check
BEFORE INSERT OR UPDATE OF TEXT ON COMMENTS
FOR EACH ROW
DECLARE
  expr_found BOOLEAN := FALSE;
  v_pattern VARCHAR2(200);
BEGIN
  FOR expr IN (SELECT PATTERN FROM FORBIDDEN_EXPRESSIONS)
  LOOP
    v_pattern := expr.PATTERN;
    IF REGEXP_LIKE(:NEW.TEXT, v_pattern, 'i') THEN
      expr_found := TRUE;
      EXIT;
    END IF;
  END LOOP;
  
  IF expr_found THEN
    RAISE_APPLICATION_ERROR(-20002, 'FORBIDDEN_EXPRESSION_IN_COMMENT');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER prevent_selffriending
BEFORE INSERT ON FRIENDS
FOR EACH ROW
BEGIN
  IF :NEW.SENDER_ID = :NEW.RECEIVER_ID THEN
    RAISE_APPLICATION_ERROR(-20003, 'CANNOT_FRIEND_YOURSELF');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER prevent_group_owner_removal
BEFORE DELETE ON USER_GROUPS
FOR EACH ROW
BEGIN
  IF :OLD.ROLE = 'OWNER' THEN
    RAISE_APPLICATION_ERROR(-20004, 'CANNOT_REMOVE_GROUP_OWNER');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER set_friend_request_date
BEFORE INSERT ON FRIENDS
FOR EACH ROW
BEGIN
  :NEW.WHEN := SYSDATE;
END;
/
